
// Utilities
//
// Provided here are several utilities to either include in other elements'
// CSS, or to apply as classes directly to HTML elements.
//
// It's advised to not use @extend on the classes found here, as it can make
// the compiled CSS a jumble and potentially harder to debug.


// clearfix() / .clearfix
//
// Useful when you need an element to clear its children, or to break an 
// element out of the flow if its siblings.

@mixin clearfix() {
	&::before,
	&::after {
	  content: '';
	  display: table;
	  clear: both;
	}
}

.clearfix {
	@include clearfix();
}





// REM Legacy Support
//
// Input the REM value and a pixel value will be added as well for
// legacy support.
//
// $rule	- The name of the CSS rule (eg. padding-top, margin-left, border-width, etc.)
// $value	- The vale, in REM, without a suffix (eg. 1.5 rem would just be entered as 1.5)

@mixin rem-backup($rule, $value) {
  #{$rule}: ($value * 10) + px;
  #{$rule}: $value + rem;
}





// Context Class Utilities
//
// Context classes will effect the direct children of the element they're
// applied to. If a context class relates directly to a visual attribute
// (eg. `.has-background-*`), only that attribute will be applied.



// has-inline-elements() / .has-inline-elements
//
// Use if you need to have an element's direct children display inline.

@mixin has-inline-elements() {

	margin: $spacing-outer 0;
	white-space: nowrap;

	&:before {
	  content: '';
	  display: inline-block;
	  height: 100%;
	  vertical-align: middle;
	  margin-right: -0.25em; /* Adjusts for spacing */
	}

	& > * {
		display: inline-block;
		margin: 0 0 0 $spacing-inner;
		vertical-align: bottom;
		&:first-child {
			margin: 0;
		}
	}

}

.has-inline-elements {
	@include has-inline-elements();
}



// Widths
//
// These utilities are for page-level containers to allow for fullbleed
// or capped width displays.



// width-capped() / .width-capped

@mixin width-capped() {
	@include rem-backup(max-width, 70);
	margin-left: auto;
	margin-right: auto;
}

.width-capped {
	@include width-capped();
}



// width-fullbleed() / .width-fullbleed

@mixin width-fullbleed() {
	
	max-width: none;
	width: 100%;
	position: relative;
	left: -50%;
	margin-left: 50%;
	
	& > * {
		@include width-capped();
	}

}

.width-fullbleed {
	@include width-fullbleed();
}





// Aesthetic Utilities

// Background Color Utilities Classes
//
// These classes should not be extended (just reference the
// $background-color-X variable needed).

.has-background--primary {
	background: $background-color-primary;
}

.has-background--secondary {
	background: $background-color-secondary;
}

.has-background--tertiary {
	background: $background-color-tertiary;
}



// Border Utilities

// Primary Border Utility Class & Mixin
//
// These classes should not be extended.
//
// @mixin border-primary($position)
//
// $position	-	top/right/bottom/left
//
// .has-border--primary	- Primary border applied to all sides.
// .has-border--primary--top	- Primary border applied to top side.
// .has-border--primary--right	- Primary border applied to right side.
// .has-border--primary--bottom	- Primary border applied to bottom side.
// .has-border--primary--left	- Primary border applied to left side.

@mixin border-primary($position:'') {
	@if $position != '' {
		$position: -#{$position};
	}
	border#{$position}: $border-width-primary solid $border-color-primary;
}

.has-border--primary {
	@include border-primary();
}
	.has-border--primary--top {
		@include border-primary(top);
	}
	.has-border--primary--right {
		@include border-primary(right);
	}
	.has-border--primary--bottom {
		@include border-primary(bottom);
	}
	.has-border--primary--left {
		@include border-primary(left);
	}

// Secondary Border Utility Class & Mixin
//
// These classes should not be extended.
//
// @mixin border-secondary($position)
//
// $position	-	top/right/bottom/left
//
// .has-border--secondary	- Secondary border applied to all sides.
// .has-border--secondary--top	- Secondary border applied to top side.
// .has-border--secondary--right	- Secondary border applied to right side.
// .has-border--secondary--bottom	- Secondary border applied to bottom side.
// .has-border--secondary--left	- Secondary border applied to left side.

@mixin border-secondary($position:'') {
	@if $position != '' {
		$position: -#{$position};
	}
	border#{$position}: $border-width-secondary solid $border-color-secondary;
}

.has-border--secondary {
	@include border-secondary();
}
	.has-border--secondary--top {
		@include border-secondary(top);
	}
	.has-border--secondary--right {
		@include border-secondary(right);
	}
	.has-border--secondary--bottom {
		@include border-secondary(bottom);
	}
	.has-border--secondary--left {
		@include border-secondary(left);
	}



// Spacing Utilities
//
// @mixin container-spacing()

@mixin spacing-container() {}
