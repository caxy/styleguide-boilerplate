
// Buttons and Button Contexts
//
// Styleguide 3.2


// Buttons
//
// Button text should be no longer than [X] words long.
//
// ::hover	-	Hover state
// .button--primary	- When a button should be highlighted/is the main action in a set, use this class.
// .button--primary::hover	- When a button should be highlighted/is the main action in a set, use this class.
//
// Markup:
// <button class="{{modifier_class}}">Button</button>
//
// PatternType: atom
//
// Styleguide 3.2.1



%button {

	background: $button-background;
	color: $button-font-color;
	border: 1px solid $button-background;
	padding: $spacing-inner/2 $spacing-inner*2.5;
	font-size: $font-size-button;
	cursor: pointer;
	font-family: $button-font-primary;
	display: inline-block;

	&:hover,
	&:focus {
		outline: none;
		color: $button-font-color;
		background: $button-background-hover;
	}

}

button,
.button,
.button--primary {
	@extend %button;
}

.button--primary {

	color: $button-primary-font-color;
	background: $button-primary-background;
	border-color: $button-primary-background;

	&:hover,
	&:focus {
		background: $button-primary-background-hover;
	}

}



// Has-Buttons Contexts
//
// Like all context classes, a container with `.has-buttons` applied should only have
// elements that are buttons or have a `.button` class applied. If more than one button
// is present in a given use case, one should be identified as the primary button.
//
// All buttons stack at the smallest breakpoint.
//
// .right	- right aligns the buttons inside the container
// .stacked	- stacks the buttons inside the container
//
// Markup:
// <div class="has-buttons {{modifier_class}}">
//   <button class="button--primary">Primary Button</button>
//   <button>Default Button</button>
// </div>
//
// PatternType: molecule
//
// ContainsPatterns: Only `buttons` or elements with the `.button` class
//
// Styleguide 3.2.2

.has-buttons {

	margin: $spacing-outer 0;
	display: block;
	font-size: 0; // eliminates extra space between child inline-block elements.
	@extend .clearfix;

	@media screen and (min-width: 0) and (max-width: $screen-small) {

		%button {

			float: left;
			clear: left;

			& + %button {
				margin: $spacing-inner 0 0;
			}

		}
	}

	@media screen and (min-width: $screen-small) {

		%button {

			& + %button {
				margin: 0 0 0 $spacing-inner;
			}

		}

		&.right {
			text-align: right;
		}

		&.stacked {

			%button {

				float: left;
				clear: left;

				& + %button {
					margin: $spacing-inner 0 0;
				}

			}
		}
	}

}